// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupUsersFieldNames          = builder.RawFieldNames(&GroupUsers{})
	groupUsersRows                = strings.Join(groupUsersFieldNames, ",")
	groupUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(groupUsersFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(groupUsersFieldNames, "`group_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGroupUsersGroupIdPrefix = "cache:groupUsers:groupId:"
)

type (
	groupUsersModel interface {
		Insert(ctx context.Context, data *GroupUsers) (sql.Result, error)
		FindOne(ctx context.Context, groupId int64) (*GroupUsers, error)
		Update(ctx context.Context, data *GroupUsers) error
		Delete(ctx context.Context, groupId int64) error
	}

	defaultGroupUsersModel struct {
		sqlc.CachedConn
		table string
	}

	GroupUsers struct {
		GroupId      int64         `db:"group_id"`
		UserId       sql.NullInt64 `db:"user_id"`
		LastAckMsgId sql.NullInt64 `db:"last_ack_msg_id"`
	}
)

func newGroupUsersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupUsersModel {
	return &defaultGroupUsersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group_users`",
	}
}

func (m *defaultGroupUsersModel) Delete(ctx context.Context, groupId int64) error {
	groupUsersGroupIdKey := fmt.Sprintf("%s%v", cacheGroupUsersGroupIdPrefix, groupId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `group_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, groupId)
	}, groupUsersGroupIdKey)
	return err
}

func (m *defaultGroupUsersModel) FindOne(ctx context.Context, groupId int64) (*GroupUsers, error) {
	groupUsersGroupIdKey := fmt.Sprintf("%s%v", cacheGroupUsersGroupIdPrefix, groupId)
	var resp GroupUsers
	err := m.QueryRowCtx(ctx, &resp, groupUsersGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", groupUsersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, groupId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupUsersModel) Insert(ctx context.Context, data *GroupUsers) (sql.Result, error) {
	groupUsersGroupIdKey := fmt.Sprintf("%s%v", cacheGroupUsersGroupIdPrefix, data.GroupId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, groupUsersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.LastAckMsgId)
	}, groupUsersGroupIdKey)
	return ret, err
}

func (m *defaultGroupUsersModel) Update(ctx context.Context, data *GroupUsers) error {
	groupUsersGroupIdKey := fmt.Sprintf("%s%v", cacheGroupUsersGroupIdPrefix, data.GroupId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `group_id` = ?", m.table, groupUsersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.LastAckMsgId, data.GroupId)
	}, groupUsersGroupIdKey)
	return err
}

func (m *defaultGroupUsersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGroupUsersGroupIdPrefix, primary)
}

func (m *defaultGroupUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", groupUsersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupUsersModel) tableName() string {
	return m.table
}
