// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/woxQAQ/im-service/pkg/common/model/single"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	messageDtlFieldNames          = builder.RawFieldNames(&MessageDtl{})
	messageDtlRows                = strings.Join(messageDtlFieldNames, ",")
	messageDtlRowsExpectAutoSet   = strings.Join(stringx.Remove(messageDtlFieldNames, "`msg_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	messageDtlRowsWithPlaceHolder = strings.Join(stringx.Remove(messageDtlFieldNames, "`msg_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMessageDtlMsgIdPrefix = "cache:messageDtl:msgId:"
)

type (
	messageDtlModel interface {
		Insert(ctx context.Context, data *MessageDtl) (sql.Result, error)
		FindOne(ctx context.Context, msgId int64) (*MessageDtl, error)
		Update(ctx context.Context, data *MessageDtl) error
		Delete(ctx context.Context, msgId int64) error
	}

	defaultMessageDtlModel struct {
		sqlc.CachedConn
		table string
	}

	MessageDtl struct {
		MsgId       int64     `db:"msg_id"`
		Content     string    `db:"content"`
		SenderId    int64     `db:"sender_id"`
		RecvId      int64     `db:"recv_id"`
		ContentType string    `db:"content_type"`
		Sendtime    time.Time `db:"sendtime"`
	}
)

func newMessageDtlModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMessageDtlModel {
	return &defaultMessageDtlModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`message_dtl`",
	}
}

func (m *defaultMessageDtlModel) Delete(ctx context.Context, msgId int64) error {
	messageDtlMsgIdKey := fmt.Sprintf("%s%v", cacheMessageDtlMsgIdPrefix, msgId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `msg_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, msgId)
	}, messageDtlMsgIdKey)
	return err
}

func (m *defaultMessageDtlModel) FindOne(ctx context.Context, msgId int64) (*MessageDtl, error) {
	messageDtlMsgIdKey := fmt.Sprintf("%s%v", cacheMessageDtlMsgIdPrefix, msgId)
	var resp MessageDtl
	err := m.QueryRowCtx(ctx, &resp, messageDtlMsgIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `msg_id` = ? limit 1", messageDtlRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, msgId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, single.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessageDtlModel) Insert(ctx context.Context, data *MessageDtl) (sql.Result, error) {
	messageDtlMsgIdKey := fmt.Sprintf("%s%v", cacheMessageDtlMsgIdPrefix, data.MsgId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, messageDtlRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Content, data.SenderId, data.RecvId, data.ContentType, data.Sendtime)
	}, messageDtlMsgIdKey)
	return ret, err
}

func (m *defaultMessageDtlModel) Update(ctx context.Context, data *MessageDtl) error {
	messageDtlMsgIdKey := fmt.Sprintf("%s%v", cacheMessageDtlMsgIdPrefix, data.MsgId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `msg_id` = ?", m.table, messageDtlRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Content, data.SenderId, data.RecvId, data.ContentType, data.Sendtime, data.MsgId)
	}, messageDtlMsgIdKey)
	return err
}

func (m *defaultMessageDtlModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMessageDtlMsgIdPrefix, primary)
}

func (m *defaultMessageDtlModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `msg_id` = ? limit 1", messageDtlRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMessageDtlModel) tableName() string {
	return m.table
}
