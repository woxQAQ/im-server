// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tSenderDtlFieldNames          = builder.RawFieldNames(&TSenderDtl{})
	tSenderDtlRows                = strings.Join(tSenderDtlFieldNames, ",")
	tSenderDtlRowsExpectAutoSet   = strings.Join(stringx.Remove(tSenderDtlFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tSenderDtlRowsWithPlaceHolder = strings.Join(stringx.Remove(tSenderDtlFieldNames, "`Id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTSenderDtlIdPrefix = "cache:tSenderDtl:Id:"
)

type (
	tSenderDtlModel interface {
		Insert(ctx context.Context, data *TSenderDtl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TSenderDtl, error)
		Update(ctx context.Context, data *TSenderDtl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTSenderDtlModel struct {
		sqlc.CachedConn
		table string
	}

	TSenderDtl struct {
		Id       int64  `db:"Id"`
		SenderId int64  `db:"sender_id"`
		Session  string `db:"session"`
		PreId    int64  `db:"pre_id"`
	}
)

func newTSenderDtlModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTSenderDtlModel {
	return &defaultTSenderDtlModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_sender_dtl`",
	}
}

func (m *defaultTSenderDtlModel) Delete(ctx context.Context, id int64) error {
	tSenderDtlIdKey := fmt.Sprintf("%s%v", cacheTSenderDtlIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `Id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tSenderDtlIdKey)
	return err
}

func (m *defaultTSenderDtlModel) FindOne(ctx context.Context, id int64) (*TSenderDtl, error) {
	tSenderDtlIdKey := fmt.Sprintf("%s%v", cacheTSenderDtlIdPrefix, id)
	var resp TSenderDtl
	err := m.QueryRowCtx(ctx, &resp, tSenderDtlIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `Id` = ? limit 1", tSenderDtlRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSenderDtlModel) Insert(ctx context.Context, data *TSenderDtl) (sql.Result, error) {
	tSenderDtlIdKey := fmt.Sprintf("%s%v", cacheTSenderDtlIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tSenderDtlRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.SenderId, data.Session, data.PreId)
	}, tSenderDtlIdKey)
	return ret, err
}

func (m *defaultTSenderDtlModel) Update(ctx context.Context, data *TSenderDtl) error {
	tSenderDtlIdKey := fmt.Sprintf("%s%v", cacheTSenderDtlIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `Id` = ?", m.table, tSenderDtlRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SenderId, data.Session, data.PreId, data.Id)
	}, tSenderDtlIdKey)
	return err
}

func (m *defaultTSenderDtlModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTSenderDtlIdPrefix, primary)
}

func (m *defaultTSenderDtlModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `Id` = ? limit 1", tSenderDtlRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTSenderDtlModel) tableName() string {
	return m.table
}
