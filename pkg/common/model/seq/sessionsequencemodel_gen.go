// Code generated by goctl. DO NOT EDIT.

package seq

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sessionSequenceFieldNames          = builder.RawFieldNames(&SessionSequence{})
	sessionSequenceRows                = strings.Join(sessionSequenceFieldNames, ",")
	sessionSequenceRowsExpectAutoSet   = strings.Join(stringx.Remove(sessionSequenceFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sessionSequenceRowsWithPlaceHolder = strings.Join(stringx.Remove(sessionSequenceFieldNames, "`session_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSessionSequenceSessionIdPrefix = "cache:sessionSequence:sessionId:"
)

type (
	sessionSequenceModel interface {
		Insert(ctx context.Context, data *SessionSequence) (sql.Result, error)
		FindOne(ctx context.Context, sessionId int64) (*SessionSequence, error)
		Update(ctx context.Context, data *SessionSequence) error
		Delete(ctx context.Context, sessionId int64) error
	}

	defaultSessionSequenceModel struct {
		sqlc.CachedConn
		table string
	}

	SessionSequence struct {
		SessionId int64 `db:"session_id"`
		MaxSeq    int64 `db:"max_seq"`
		CurSeq    int64 `db:"cur_seq"`
	}
)

func newSessionSequenceModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSessionSequenceModel {
	return &defaultSessionSequenceModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`session_sequence`",
	}
}

func (m *defaultSessionSequenceModel) Delete(ctx context.Context, sessionId int64) error {
	sessionSequenceSessionIdKey := fmt.Sprintf("%s%v", cacheSessionSequenceSessionIdPrefix, sessionId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `session_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, sessionId)
	}, sessionSequenceSessionIdKey)
	return err
}

func (m *defaultSessionSequenceModel) FindOne(ctx context.Context, sessionId int64) (*SessionSequence, error) {
	sessionSequenceSessionIdKey := fmt.Sprintf("%s%v", cacheSessionSequenceSessionIdPrefix, sessionId)
	var resp SessionSequence
	err := m.QueryRowCtx(ctx, &resp, sessionSequenceSessionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `session_id` = ? limit 1", sessionSequenceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, sessionId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSessionSequenceModel) Insert(ctx context.Context, data *SessionSequence) (sql.Result, error) {
	sessionSequenceSessionIdKey := fmt.Sprintf("%s%v", cacheSessionSequenceSessionIdPrefix, data.SessionId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, sessionSequenceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SessionId, data.MaxSeq, data.CurSeq)
	}, sessionSequenceSessionIdKey)
	return ret, err
}

func (m *defaultSessionSequenceModel) Update(ctx context.Context, data *SessionSequence) error {
	sessionSequenceSessionIdKey := fmt.Sprintf("%s%v", cacheSessionSequenceSessionIdPrefix, data.SessionId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `session_id` = ?", m.table, sessionSequenceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MaxSeq, data.CurSeq, data.SessionId)
	}, sessionSequenceSessionIdKey)
	return err
}

func (m *defaultSessionSequenceModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSessionSequenceSessionIdPrefix, primary)
}

func (m *defaultSessionSequenceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `session_id` = ? limit 1", sessionSequenceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSessionSequenceModel) tableName() string {
	return m.table
}
