// Code generated by goctl. DO NOT EDIT.

package seq

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupSequenceFieldNames          = builder.RawFieldNames(&GroupSequence{})
	groupSequenceRows                = strings.Join(groupSequenceFieldNames, ",")
	groupSequenceRowsExpectAutoSet   = strings.Join(stringx.Remove(groupSequenceFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupSequenceRowsWithPlaceHolder = strings.Join(stringx.Remove(groupSequenceFieldNames, "`group_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGroupSequenceGroupIdPrefix = "cache:groupSequence:groupId:"
)

type (
	groupSequenceModel interface {
		Insert(ctx context.Context, data *GroupSequence) (sql.Result, error)
		FindOne(ctx context.Context, groupId int64) (*GroupSequence, error)
		Update(ctx context.Context, data *GroupSequence) error
		Delete(ctx context.Context, groupId int64) error
	}

	defaultGroupSequenceModel struct {
		sqlc.CachedConn
		table string
	}

	GroupSequence struct {
		GroupId int64 `db:"group_id"`
		CurSeq  int64 `db:"cur_seq"`
		MaxSeq  int64 `db:"max_seq"`
	}
)

func newGroupSequenceModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupSequenceModel {
	return &defaultGroupSequenceModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group_sequence`",
	}
}

func (m *defaultGroupSequenceModel) Delete(ctx context.Context, groupId int64) error {
	groupSequenceGroupIdKey := fmt.Sprintf("%s%v", cacheGroupSequenceGroupIdPrefix, groupId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `group_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, groupId)
	}, groupSequenceGroupIdKey)
	return err
}

func (m *defaultGroupSequenceModel) FindOne(ctx context.Context, groupId int64) (*GroupSequence, error) {
	groupSequenceGroupIdKey := fmt.Sprintf("%s%v", cacheGroupSequenceGroupIdPrefix, groupId)
	var resp GroupSequence
	err := m.QueryRowCtx(ctx, &resp, groupSequenceGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", groupSequenceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, groupId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupSequenceModel) Insert(ctx context.Context, data *GroupSequence) (sql.Result, error) {
	groupSequenceGroupIdKey := fmt.Sprintf("%s%v", cacheGroupSequenceGroupIdPrefix, data.GroupId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, groupSequenceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupId, data.CurSeq, data.MaxSeq)
	}, groupSequenceGroupIdKey)
	return ret, err
}

func (m *defaultGroupSequenceModel) Update(ctx context.Context, data *GroupSequence) error {
	groupSequenceGroupIdKey := fmt.Sprintf("%s%v", cacheGroupSequenceGroupIdPrefix, data.GroupId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `group_id` = ?", m.table, groupSequenceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CurSeq, data.MaxSeq, data.GroupId)
	}, groupSequenceGroupIdKey)
	return err
}

func (m *defaultGroupSequenceModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGroupSequenceGroupIdPrefix, primary)
}

func (m *defaultGroupSequenceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", groupSequenceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupSequenceModel) tableName() string {
	return m.table
}
