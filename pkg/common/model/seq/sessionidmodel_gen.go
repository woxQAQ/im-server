// Code generated by goctl. DO NOT EDIT.

package seq

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sessionIdFieldNames          = builder.RawFieldNames(&SessionId{})
	sessionIdRows                = strings.Join(sessionIdFieldNames, ",")
	sessionIdRowsExpectAutoSet   = strings.Join(stringx.Remove(sessionIdFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sessionIdRowsWithPlaceHolder = strings.Join(stringx.Remove(sessionIdFieldNames, "`session`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSessionIdSessionPrefix = "cache:sessionId:session:"
)

type (
	sessionIdModel interface {
		Insert(ctx context.Context, data *SessionId) (sql.Result, error)
		FindOne(ctx context.Context, session int64) (*SessionId, error)
		Update(ctx context.Context, data *SessionId) error
		Delete(ctx context.Context, session int64) error
	}

	defaultSessionIdModel struct {
		sqlc.CachedConn
		table string
	}

	SessionId struct {
		Session int64 `db:"session"`
		UserId1 int64 `db:"user_id_1"`
		UserId2 int64 `db:"user_id_2"`
	}
)

func newSessionIdModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSessionIdModel {
	return &defaultSessionIdModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`session_id`",
	}
}

func (m *defaultSessionIdModel) Delete(ctx context.Context, session int64) error {
	sessionIdSessionKey := fmt.Sprintf("%s%v", cacheSessionIdSessionPrefix, session)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `session` = ?", m.table)
		return conn.ExecCtx(ctx, query, session)
	}, sessionIdSessionKey)
	return err
}

func (m *defaultSessionIdModel) FindOne(ctx context.Context, session int64) (*SessionId, error) {
	sessionIdSessionKey := fmt.Sprintf("%s%v", cacheSessionIdSessionPrefix, session)
	var resp SessionId
	err := m.QueryRowCtx(ctx, &resp, sessionIdSessionKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `session` = ? limit 1", sessionIdRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, session)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSessionIdModel) Insert(ctx context.Context, data *SessionId) (sql.Result, error) {
	sessionIdSessionKey := fmt.Sprintf("%s%v", cacheSessionIdSessionPrefix, data.Session)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, sessionIdRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Session, data.UserId1, data.UserId2)
	}, sessionIdSessionKey)
	return ret, err
}

func (m *defaultSessionIdModel) Update(ctx context.Context, data *SessionId) error {
	sessionIdSessionKey := fmt.Sprintf("%s%v", cacheSessionIdSessionPrefix, data.Session)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `session` = ?", m.table, sessionIdRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId1, data.UserId2, data.Session)
	}, sessionIdSessionKey)
	return err
}

func (m *defaultSessionIdModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSessionIdSessionPrefix, primary)
}

func (m *defaultSessionIdModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `session` = ? limit 1", sessionIdRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSessionIdModel) tableName() string {
	return m.table
}
