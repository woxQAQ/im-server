// Code generated by goctl. DO NOT EDIT.

package seq

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupMessageSequenceFieldNames          = builder.RawFieldNames(&GroupMessageSequence{})
	groupMessageSequenceRows                = strings.Join(groupMessageSequenceFieldNames, ",")
	groupMessageSequenceRowsExpectAutoSet   = strings.Join(stringx.Remove(groupMessageSequenceFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupMessageSequenceRowsWithPlaceHolder = strings.Join(stringx.Remove(groupMessageSequenceFieldNames, "`group_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGroupMessageSequenceGroupIdPrefix = "cache:groupMessageSequence:groupId:"
)

type (
	groupMessageSequenceModel interface {
		Insert(ctx context.Context, data *GroupMessageSequence) (sql.Result, error)
		FindOne(ctx context.Context, groupId int64) (*GroupMessageSequence, error)
		Update(ctx context.Context, data *GroupMessageSequence) error
		Delete(ctx context.Context, groupId int64) error
	}

	defaultGroupMessageSequenceModel struct {
		sqlc.CachedConn
		table string
	}

	GroupMessageSequence struct {
		GroupId int64 `db:"group_id"`
		MsgId   int64 `db:"msg_id"`
		Seq     int64 `db:"seq"`
	}
)

func newGroupMessageSequenceModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupMessageSequenceModel {
	return &defaultGroupMessageSequenceModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group_message_sequence`",
	}
}

func (m *defaultGroupMessageSequenceModel) Delete(ctx context.Context, groupId int64) error {
	groupMessageSequenceGroupIdKey := fmt.Sprintf("%s%v", cacheGroupMessageSequenceGroupIdPrefix, groupId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `group_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, groupId)
	}, groupMessageSequenceGroupIdKey)
	return err
}

func (m *defaultGroupMessageSequenceModel) FindOne(ctx context.Context, groupId int64) (*GroupMessageSequence, error) {
	groupMessageSequenceGroupIdKey := fmt.Sprintf("%s%v", cacheGroupMessageSequenceGroupIdPrefix, groupId)
	var resp GroupMessageSequence
	err := m.QueryRowCtx(ctx, &resp, groupMessageSequenceGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", groupMessageSequenceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, groupId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupMessageSequenceModel) Insert(ctx context.Context, data *GroupMessageSequence) (sql.Result, error) {
	groupMessageSequenceGroupIdKey := fmt.Sprintf("%s%v", cacheGroupMessageSequenceGroupIdPrefix, data.GroupId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, groupMessageSequenceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupId, data.MsgId, data.Seq)
	}, groupMessageSequenceGroupIdKey)
	return ret, err
}

func (m *defaultGroupMessageSequenceModel) Update(ctx context.Context, data *GroupMessageSequence) error {
	groupMessageSequenceGroupIdKey := fmt.Sprintf("%s%v", cacheGroupMessageSequenceGroupIdPrefix, data.GroupId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `group_id` = ?", m.table, groupMessageSequenceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MsgId, data.Seq, data.GroupId)
	}, groupMessageSequenceGroupIdKey)
	return err
}

func (m *defaultGroupMessageSequenceModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGroupMessageSequenceGroupIdPrefix, primary)
}

func (m *defaultGroupMessageSequenceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", groupMessageSequenceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupMessageSequenceModel) tableName() string {
	return m.table
}
