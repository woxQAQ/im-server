// Code generated by goctl. DO NOT EDIT.

package single

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	singleMessageFieldNames          = builder.RawFieldNames(&SingleMessage{})
	singleMessageRows                = strings.Join(singleMessageFieldNames, ",")
	singleMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(singleMessageFieldNames, "`message_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	singleMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(singleMessageFieldNames, "`message_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSingleMessageMessageIdPrefix = "cache:singleMessage:messageId:"
)

type (
	singleMessageModel interface {
		Insert(ctx context.Context, data *SingleMessage) (sql.Result, error)
		FindOne(ctx context.Context, messageId int64) (*SingleMessage, error)
		Update(ctx context.Context, data *SingleMessage) error
		Delete(ctx context.Context, messageId int64) error
	}

	defaultSingleMessageModel struct {
		sqlc.CachedConn
		table string
	}

	SingleMessage struct {
		MessageId  int64     `db:"message_id"`
		SenderId   int64     `db:"sender_id"`
		ReceiverId int64     `db:"receiver_id"`
		Content    string    `db:"content"`
		Timestamp  time.Time `db:"timestamp"`
		IsRead     int64     `db:"is_read"`
	}
)

func newSingleMessageModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSingleMessageModel {
	return &defaultSingleMessageModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`single_message`",
	}
}

func (m *defaultSingleMessageModel) Delete(ctx context.Context, messageId int64) error {
	singleMessageMessageIdKey := fmt.Sprintf("%s%v", cacheSingleMessageMessageIdPrefix, messageId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `message_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, messageId)
	}, singleMessageMessageIdKey)
	return err
}

func (m *defaultSingleMessageModel) FindOne(ctx context.Context, messageId int64) (*SingleMessage, error) {
	singleMessageMessageIdKey := fmt.Sprintf("%s%v", cacheSingleMessageMessageIdPrefix, messageId)
	var resp SingleMessage
	err := m.QueryRowCtx(ctx, &resp, singleMessageMessageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `message_id` = ? limit 1", singleMessageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, messageId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSingleMessageModel) Insert(ctx context.Context, data *SingleMessage) (sql.Result, error) {
	singleMessageMessageIdKey := fmt.Sprintf("%s%v", cacheSingleMessageMessageIdPrefix, data.MessageId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, singleMessageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SenderId, data.ReceiverId, data.Content, data.Timestamp, data.IsRead)
	}, singleMessageMessageIdKey)
	return ret, err
}

func (m *defaultSingleMessageModel) Update(ctx context.Context, data *SingleMessage) error {
	singleMessageMessageIdKey := fmt.Sprintf("%s%v", cacheSingleMessageMessageIdPrefix, data.MessageId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `message_id` = ?", m.table, singleMessageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SenderId, data.ReceiverId, data.Content, data.Timestamp, data.IsRead, data.MessageId)
	}, singleMessageMessageIdKey)
	return err
}

func (m *defaultSingleMessageModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSingleMessageMessageIdPrefix, primary)
}

func (m *defaultSingleMessageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `message_id` = ? limit 1", singleMessageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSingleMessageModel) tableName() string {
	return m.table
}
