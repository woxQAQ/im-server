version: "3.5"
networks:
  backend:
    driver: ${NETWORKS_DRIVER}
services:
  golang:
    build:
      context: ./golang
    container_name: golang
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${CODE_PATH_HOST}:/go/src/code
      - ${GO_PKG_HOST}:/go/pkg
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      - "8003:8003"
      - "9000:9000"
      - "9001:9001"
      - "9002:9002"
      - "9003:9003"
    stdin_open: true
    tty: true
    networks:
      - backend
    restart: always
  etcd:
    container_name: etcd
    build:
      context: ./etcd
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:
      - "${ETCD_PORT}:2379"
    networks:
      - backend
    restart: always
  mysql:
    container_name: mysql
    build:
      context: ./mysql
    environment:
      - TZ=${TZ}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend
    restart: always
  redis:
    container_name: redis
    build:
      context: ./redis
    environment:
      - TZ=${TZ}
    privileged: true
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    networks:
      - backend
    restart: always
#  mysql-manage:
#    build:
#      context: ./mysql-manage
#    environment:
#      - TZ=${TZ}
#      - PMA_ARBITRARY=1
#      - MYSQL_USER=${MYSQL_MANAGE_USERNAME}
#      - MYSQL_PASSWORD=${MYSQL_MANAGE_PASSWORD}
#      - MYSQL_ROOT_PASSWORD=${MYSQL_MANAGE_ROOT_PASSWORD}
#      - PMA_HOST=${MYSQL_MANAGE_CONNECT_HOST}
#      - PMA_PORT=${MYSQL_MANAGE_CONNECT_PORT}
#    ports:
#      - "${MYSQL_MANAGE_PORT}:80"
#    depends_on:
#      - mysql
#    networks:
#      - backend
#    restart: always
#  redis-manage:
#    build:
#      context: ./redis-manage
#    environment:
#      - TZ=${TZ}
#      - ADMIN_USER=${REDIS_MANAGE_USERNAME}
#      - ADMIN_PASS=${REDIS_MANAGE_PASSWORD}
#      - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST}
#      - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT}
#    ports:
#      - "${REDIS_MANAGE_PORT}:80"
#    depends_on:
#      - redis
#    networks:
#      - backend
#    restart: always
  etcd_manager:
    container_name: etcd_manager
    build:
      context: ./etcd-manage
    environment:
      - TZ=${TZ}
    ports:
      - "${ETCD_MANAGE_PORT}:8080"
    depends_on:
      - etcd
    networks:
      - backend
    restart: always
  prometheus:
    container_name: prometheus
    build:
      context: ./prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - backend
    restart: always
  jaeger:
    container_name: jaeger
    build:
      context: ./jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"
    networks:
      - backend
    restart: always
  grafana:
    container_name: grafana
    build:
      context: ./grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - backend
    restart: always
  dtm:
    container_name: dtm
    build:
      context: ./dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/config/config.yml"
    privileged: true
    volumes:
      - ./dtm/config.yml:/app/dtm/config/config.yml
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36789"
    networks:
      - backend
    restart: always

  rocketmq-nameserver:
    build:
      context: rocket
    command: ["sh", "mqnamesrv"]
    container_name: rmqnamesrv
    environment:
      - MAX_HEAP_SIZE=256M
      - HEAP_NEWSIZE=128M
    ports:
      - "9876:9876"
    networks:
      - backend
    restart: always

  rocketmq-broker:
    container_name: mqbroker
    build:
      context: rocket
    ports:
      - "10911:10911"
      - "10909:10909"
    volumes:
      - ./rocket/broker.conf:/etc/rocketmq/broker.conf
    depends_on:
      - rocketmq-nameserver
    command: ["sh", "mqbroker", "-c", "/etc/rocketmq/broker.conf"]
    environment:
      - NAMESRV_ADDR=rmqnamesrv:9876
      - JAVA_OPT_EXT=-server -Xms256m -Xmx256m -Xmn128m
#      - MAX_HEAP_SIZE=512M
#      - HEAP_NEW_SIZE=256M
    networks:
      - backend
    restart: always

  rocketmq-console:
    image: apacherocketmq/rocketmq-dashboard
    environment:
      - JAVA_OPTS = -Xmx256M -Xms256M -Xmn128M -Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rockermq.sendMessageWithVIPChannel=false
    ports:
      - "8099:8080"
    depends_on:
      - rocketmq-nameserver
    networks:
      - backend
    restart: always
